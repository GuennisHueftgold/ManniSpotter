apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.oss.licenses.plugin'
//apply plugin: 'com.github.kt3k.coveralls'

android {
    compileSdkVersion 27
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        applicationId "com.semeshky.kvgspotter"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    dataBinding {
        enabled = true
    }
    buildTypes {

        applicationVariants.all { variant ->
        }
        release {
            minifyEnabled true
            versionNameSuffix "-release"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
            minifyEnabled false
            versionNameSuffix "-debug"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "mapType", "gplayserivces"

    productFlavors {
        playServices {
            dimension "gplayserivces"
            versionNameSuffix "-ps"
        }
        noPlayServices {
            dimension "gplayserivces"
            versionNameSuffix "-nops"
        }
        osm {
            dimension "mapType"
            applicationIdSuffix ".osm"
            versionNameSuffix "-osm"
        }
        gmaps {
            dimension "mapType"
            applicationIdSuffix ".gmaps"
            versionNameSuffix "-gmaps"
        }
    }
    lintOptions {
        abortOnError true
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

task jacocoTestReport3(type: JacocoReport) {

    group "Jacoco Report"
    reports {
        html.enabled = true
        html.setDestination(new File("${buildDir}/outputs/code-coverage/mergeJacocoReport"))
        xml.enabled = true
        xml.setDestination(new File("${buildDir}/outputs/code-coverage/mergeJacocoReport.xml"))
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/**/*.exec', 'outputs/code-coverage/connected/**/*coverage.ec'
    ])
}
task mergeJacocoReport(type: JacocoMerge) {
    group "Jacoco Report"
    description "Merge Jacoco Code Coverage Report"

    def executionFiles = fileTree(dir: "${buildDir}",
            includes: ['**/*.exec', '**/*.ec'],
            excludes: ['mergeJacocoReport.exec']
    )
    setExecutionData(executionFiles)
    setDestinationFile(new File("${buildDir}/outputs/code-coverage/mergeJacocoReport.exec"))
}

def srcDirs3 = android.applicationVariants.collect{ variant ->
    println variant.name
    variant.sourceSets.java.srcDirs.collect { dir -> dir.path }.flatten()
}.flatten()

task jacocoTestReport(type: JacocoReport) {

    group "Jacoco Report"
    reports {
        html.enabled = true
        html.setDestination(new File("${buildDir}/outputs/code-coverage/mergeJacocoReport"))
        xml.enabled = true
        xml.setDestination(new File("${buildDir}/outputs/code-coverage/mergeJacocoReport.xml"))
    }
    FileFilter srcDirFilter=new FileFilter() {
        @Override
        boolean accept(File file) {
            if(!file.isDirectory()){
                return false
            }
            if(!file.parent.endsWith("java")){
                return false
            }
            return true
        }
    }
    FileFilter classDirFilter=new FileFilter() {
        @Override
        boolean accept(File file) {
            if(!file.isDirectory()){
                return false
            }
            if(!file.parent.endsWith("debug")||!file.parent.endsWith("release")){
                return false
            }
            return true
        }
    }
    def srcDirs=files(new File("${project.projectDir}/src")
        .listFiles(srcDirFilter))
    def classDirs=files(new File("${buildDir}/intermediates/classes/")
            .listFiles(classDirFilter))
    def fileFilter = ['**/R.class',
                      '**/BR.class',
                      '**/R$*.class',
                      '**/BR$*.class',
                      '**/BuildConfig.*',
                      '**/*databinding/**/*.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      "**/services/**/model/**",
                      'android/**/*.*']
    //variant.sourceSets.java.srcDirs.collect { it.path }.flatten()
    def srcDirs2 = fileTree(dir: "${project.projectDir}/src", includes: ["*/java/**/*.*"])
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes", excludes: fileFilter)
    dependsOn mergeJacocoReport

    def executionFiles1 = fileTree(dir: "${buildDir}/jacoco",
            includes: ['**/*.exec', '**/*.ec']
    )
    def executionFiles2 = fileTree(dir: "${buildDir}/outputs/code-coverage/connected/flavors",
            includes: ['**/*.exec', '**/*.ec']
    )
    sourceDirectories = files(srcDirs2)
    println sourceDirectories.asList()
    classDirectories = files(debugTree)
    executionData = files(executionFiles2)//files(new File("${buildDir}/outputs/code-coverage/mergeJacocoReport.exec"))
}

subprojects.each { $project ->
    def tasks = $project.tasks.withType(JacocoReport)

    if (tasks != null) {
        mergeJacocoReport.dependsOn << tasks
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

jacoco {
    toolVersion = "0.7.8"
}

android.variantFilter { variant ->
    // Filter variants for impossible combinations
    int excludeMatches = 0
    for (int i = 0; i < variant.getFlavors().size(); i++) {
        final String name = variant.getFlavors().get(i).name
        if (name.equals("gmaps") || name.equals("noPlayServices")) {
            excludeMatches++
        }
    }
    if (excludeMatches == 2) {
        variant.setIgnore(true)
    }
}

android.applicationVariants.all { variant ->
    //ADDING SEVERAL BUILD VARIANT DEPENDEND CONSTANTS TO THE RESOURCE FILES
    variant.resValue "string", "SEARCH_SUGGEST_AUTHORITY", variant.applicationId + ".providers.search"
    variant.buildConfigField("String", "SEARCH_SUGGEST_AUTHORITY", "\"" + variant.applicationId + ".providers.search\"")
    variant.resValue "string", "SEARCH_SUGGEST_CONTENT_URI", "content://" + variant.applicationId + "/stop"
    variant.buildConfigField("String", "SEARCH_SUGGEST_CONTENT_URI", "\"content://" + variant.applicationId + "/stop\"")
    variant.resValue "string", "PACKAGE_NAME", variant.applicationId
    if (variant.name.contains("gmaps")) {
        if (variant.buildType.name.equals("debug")) {
            resValue "string", "GMAPS_API_KEY", getGoogleMapsApiKey(false)
        } else {
            resValue "string", "GMAPS_API_KEY", getGoogleMapsApiKey(true)
        }
    }
}

def getGoogleMapsApiKey(release) {
    Properties props = new Properties()
    if (release) {
        props.load(new FileInputStream(new File('mobile/release.secrets')))
    } else {
        props.load(new FileInputStream(new File('mobile/debug.secrets')))
    }
    return props['GMAPS_API_KEY']
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:' + rootProject.supportLibVersion
    implementation 'com.android.support:appcompat-v7:' + rootProject.supportLibVersion
    compile 'android.arch.lifecycle:extensions:' + rootProject.archRoomVersion
    annotationProcessor 'android.arch.lifecycle:compiler:' + rootProject.archRoomVersion
    implementation 'android.arch.lifecycle:runtime:1.0.3'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-android:2.13.0'
    androidTestImplementation 'org.mockito:mockito-android:2.13.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation 'com.android.support:recyclerview-v7:' + rootProject.supportLibVersion
    implementation 'com.android.support:design:' + rootProject.supportLibVersion
    implementation 'com.android.support:cardview-v7:' + rootProject.supportLibVersion
    implementation 'android.arch.persistence.room:runtime:' + rootProject.archRoomVersion
    implementation 'android.arch.persistence.room:rxjava2:' + rootProject.archRoomVersion
    annotationProcessor 'android.arch.persistence.room:compiler:' + rootProject.archRoomVersion
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.5'
    compile 'com.android.support:preference-v14:' + rootProject.supportLibVersion

    // GMaps Dependencies
    gmapsImplementation 'com.google.android.gms:play-services-maps:' + rootProject.playServicesVersion
    gmapsCompile 'com.google.maps.android:android-maps-utils:0.5'

    // OSM Dependencies
    osmCompile 'org.osmdroid:osmdroid-android:5.6.5'

    // Play Services Dependencies
    playServicesCompile 'com.google.android.gms:play-services-oss-licenses:' + rootProject.playServicesVersion
    playServicesImplementation 'com.google.android.gms:play-services-location:' + rootProject.playServicesVersion

    implementation 'com.github.guennishueftgold.trapeze.api:trapezeapi:1.3.+'
    implementation 'com.jakewharton.timber:timber:' + rootProject.timberVersion
}
